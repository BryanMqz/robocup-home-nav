"""
This type stub file was generated by pyright.
"""

import sys
import os
import platform
from distutils.errors import DistutilsError
from numpy.distutils.misc_util import get_shared_lib_extension

"""
This file defines a set of system_info classes for getting
information about various resources (libraries, library directories,
include directories, etc.) in the system. Currently, the following
classes are available:

  atlas_info
  atlas_threads_info
  atlas_blas_info
  atlas_blas_threads_info
  lapack_atlas_info
  lapack_atlas_threads_info
  atlas_3_10_info
  atlas_3_10_threads_info
  atlas_3_10_blas_info,
  atlas_3_10_blas_threads_info,
  lapack_atlas_3_10_info
  lapack_atlas_3_10_threads_info
  blas_info
  lapack_info
  openblas_info
  blis_info
  blas_opt_info       # usage recommended
  lapack_opt_info     # usage recommended
  fftw_info,dfftw_info,sfftw_info
  fftw_threads_info,dfftw_threads_info,sfftw_threads_info
  djbfft_info
  x11_info
  lapack_src_info
  blas_src_info
  numpy_info
  numarray_info
  numpy_info
  boost_python_info
  agg2_info
  wx_info
  gdk_pixbuf_xlib_2_info
  gdk_pixbuf_2_info
  gdk_x11_2_info
  gtkp_x11_2_info
  gtkp_2_info
  xft_info
  freetype2_info
  umfpack_info

Usage:
    info_dict = get_info(<name>)
  where <name> is a string 'atlas','x11','fftw','lapack','blas',
  'lapack_src', 'blas_src', etc. For a complete list of allowed names,
  see the definition of get_info() function below.

  Returned info_dict is a dictionary which is compatible with
  distutils.setup keyword arguments. If info_dict == {}, then the
  asked resource is not available (system_info could not find it).

  Several *_info classes specify an environment variable to specify
  the locations of software. When setting the corresponding environment
  variable to 'None' then the software will be ignored, even when it
  is available in system.

Global parameters:
  system_info.search_static_first - search static libraries (.a)
             in precedence to shared ones (.so, .sl) if enabled.
  system_info.verbosity - output the results to stdout if enabled.

The file 'site.cfg' is looked for in

1) Directory of main setup.py file being run.
2) Home directory of user running the setup.py file as ~/.numpy-site.cfg
3) System wide directory (location of this file...)

The first one found is used to get system configuration options The
format is that used by ConfigParser (i.e., Windows .INI style). The
section ALL has options that are the default for each section. The
available sections are fftw, atlas, and x11. Appropriate defaults are
used if nothing is specified.

The order of finding the locations of resources is the following:
 1. environment variable
 2. section in site.cfg
 3. ALL section in site.cfg
Only the first complete match is returned.

Example:
----------
[ALL]
library_dirs = /usr/lib:/usr/local/lib:/opt/lib
include_dirs = /usr/include:/usr/local/include:/opt/include
src_dirs = /usr/local/src:/opt/src
# search static libraries (.a) in preference to shared ones (.so)
search_static_first = 0

[fftw]
fftw_libs = rfftw, fftw
fftw_opt_libs = rfftw_threaded, fftw_threaded
# if the above aren't found, look for {s,d}fftw_libs and {s,d}fftw_opt_libs

[atlas]
library_dirs = /usr/lib/3dnow:/usr/lib/3dnow/atlas
# for overriding the names of the atlas libraries
atlas_libs = lapack, f77blas, cblas, atlas

[x11]
library_dirs = /usr/X11R6/lib
include_dirs = /usr/X11R6/include
----------

Authors:
  Pearu Peterson <pearu@cens.ioc.ee>, February 2002
  David M. Cooke <cookedm@physics.mcmaster.ca>, April 2002

Copyright 2002 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@cens.ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy (BSD style) license.  See LICENSE.txt that came with
this distribution for specifics.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.

"""
if sys.version_info[0] < 3:
    ...
else:
    ...
_bits = { '32bit': 32,'64bit': 64 }
platform_bits = _bits[platform.architecture()[0]]
def libpaths(paths, bits):
    """Return a list of library paths valid on 32 or 64 bit systems.

    Inputs:
      paths : sequence
        A sequence of strings (typically paths)
      bits : int
        An integer, the only valid values are 32 or 64.  A ValueError exception
      is raised otherwise.

    Examples:

    Consider a list of directories
    >>> paths = ['/usr/X11R6/lib','/usr/X11/lib','/usr/lib']

    For a 32-bit platform, this is already valid:
    >>> np.distutils.system_info.libpaths(paths,32)
    ['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib']

    On 64 bits, we prepend the '64' postfix
    >>> np.distutils.system_info.libpaths(paths,64)
    ['/usr/X11R6/lib64', '/usr/X11R6/lib', '/usr/X11/lib64', '/usr/X11/lib',
    '/usr/lib64', '/usr/lib']
    """
    ...

if sys.platform == 'win32':
    ...
else:
    default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib', '/opt/local/lib', '/sw/lib'], platform_bits)
    default_runtime_dirs = []
    default_include_dirs = ['/usr/local/include', '/opt/include', '/usr/include', '/opt/local/include/ufsparse', '/opt/local/include', '/sw/include', '/usr/include/suitesparse']
    default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
    default_x11_lib_dirs = libpaths(['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib'], platform_bits)
    default_x11_include_dirs = ['/usr/X11R6/include', '/usr/X11/include', '/usr/include']
    tmp = None
if os.path.join(sys.prefix, 'lib') not in default_lib_dirs:
    ...
default_lib_dirs = [_m for _m in default_lib_dirs if os.path.isdir(_m)]
default_runtime_dirs = [_m for _m in default_runtime_dirs if os.path.isdir(_m)]
default_include_dirs = [_m for _m in default_include_dirs if os.path.isdir(_m)]
default_src_dirs = [_m for _m in default_src_dirs if os.path.isdir(_m)]
so_ext = get_shared_lib_extension()
def get_standard_file(fname):
    """Returns a list of files named 'fname' from
    1) System-wide directory (directory-location of this module)
    2) Users HOME directory (os.environ['HOME'])
    3) Local directory
    """
    ...

def get_info(name, notfound_action=...):
    """
    notfound_action:
      0 - do nothing
      1 - display warning message
      2 - raise error
    """
    ...

class NotFoundError(DistutilsError):
    """Some third-party program or library is not found."""
    ...


class AtlasNotFoundError(NotFoundError):
    """
    Atlas (http://math-atlas.sourceforge.net/) libraries not found.
    Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [atlas]) or by setting
    the ATLAS environment variable."""
    ...


class LapackNotFoundError(NotFoundError):
    """
    Lapack (http://www.netlib.org/lapack/) libraries not found.
    Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [lapack]) or by setting
    the LAPACK environment variable."""
    ...


class LapackSrcNotFoundError(LapackNotFoundError):
    """
    Lapack (http://www.netlib.org/lapack/) sources not found.
    Directories to search for the sources can be specified in the
    numpy/distutils/site.cfg file (section [lapack_src]) or by setting
    the LAPACK_SRC environment variable."""
    ...


class BlasNotFoundError(NotFoundError):
    """
    Blas (http://www.netlib.org/blas/) libraries not found.
    Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [blas]) or by setting
    the BLAS environment variable."""
    ...


class BlasSrcNotFoundError(BlasNotFoundError):
    """
    Blas (http://www.netlib.org/blas/) sources not found.
    Directories to search for the sources can be specified in the
    numpy/distutils/site.cfg file (section [blas_src]) or by setting
    the BLAS_SRC environment variable."""
    ...


class FFTWNotFoundError(NotFoundError):
    """
    FFTW (http://www.fftw.org/) libraries not found.
    Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [fftw]) or by setting
    the FFTW environment variable."""
    ...


class DJBFFTNotFoundError(NotFoundError):
    """
    DJBFFT (https://cr.yp.to/djbfft.html) libraries not found.
    Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [djbfft]) or by setting
    the DJBFFT environment variable."""
    ...


class NumericNotFoundError(NotFoundError):
    """
    Numeric (https://www.numpy.org/) module not found.
    Get it from above location, install it, and retry setup.py."""
    ...


class X11NotFoundError(NotFoundError):
    """X11 libraries not found."""
    ...


class UmfpackNotFoundError(NotFoundError):
    """
    UMFPACK sparse solver (https://www.cise.ufl.edu/research/sparse/umfpack/)
    not found. Directories to search for the libraries can be specified in the
    numpy/distutils/site.cfg file (section [umfpack]) or by setting
    the UMFPACK environment variable."""
    ...


class system_info(object):
    """ get_info() is the only public method. Don't use others.
    """
    section = ...
    dir_env_var = ...
    search_static_first = ...
    verbosity = ...
    saved_results = ...
    notfounderror = ...
    def __init__(self, default_lib_dirs=..., default_include_dirs=..., verbosity=...) -> None:
        ...
    
    def parse_config_files(self):
        ...
    
    def calc_libraries_info(self):
        ...
    
    def set_info(self, **info):
        ...
    
    def has_info(self):
        ...
    
    def calc_extra_info(self):
        """ Updates the information in the current information with
        respect to these flags:
          extra_compile_args
          extra_link_args
        """
        ...
    
    def get_info(self, notfound_action=...):
        """ Return a dictonary with items that are compatible
            with numpy.distutils.setup keyword arguments.
        """
        ...
    
    def get_paths(self, section, key):
        ...
    
    def get_lib_dirs(self, key=...):
        ...
    
    def get_runtime_lib_dirs(self, key=...):
        ...
    
    def get_include_dirs(self, key=...):
        ...
    
    def get_src_dirs(self, key=...):
        ...
    
    def get_libs(self, key, default):
        ...
    
    def get_libraries(self, key=...):
        ...
    
    def library_extensions(self):
        ...
    
    def check_libs(self, lib_dirs, libs, opt_libs=...):
        """If static or shared libraries are available then return
        their info dictionary.

        Checks for all libraries as shared libraries first, then
        static (or vice versa if self.search_static_first is True).
        """
        ...
    
    def check_libs2(self, lib_dirs, libs, opt_libs=...):
        """If static or shared libraries are available then return
        their info dictionary.

        Checks each library for shared or static.
        """
        ...
    
    def combine_paths(self, *args):
        """Return a list of existing paths composed by all combinations
        of items from the arguments.
        """
        ...
    


class fft_opt_info(system_info):
    def calc_info(self):
        ...
    


class fftw_info(system_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    ver_info = ...
    def calc_ver_info(self, ver_param):
        """Returns True on successful version detection, else False"""
        ...
    
    def calc_info(self):
        ...
    


class fftw2_info(fftw_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    ver_info = ...


class fftw3_info(fftw_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    ver_info = ...


class dfftw_info(fftw_info):
    section = ...
    dir_env_var = ...
    ver_info = ...


class sfftw_info(fftw_info):
    section = ...
    dir_env_var = ...
    ver_info = ...


class fftw_threads_info(fftw_info):
    section = ...
    dir_env_var = ...
    ver_info = ...


class dfftw_threads_info(fftw_info):
    section = ...
    dir_env_var = ...
    ver_info = ...


class sfftw_threads_info(fftw_info):
    section = ...
    dir_env_var = ...
    ver_info = ...


class djbfft_info(system_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


class mkl_info(system_info):
    section = ...
    dir_env_var = ...
    _lib_mkl = ...
    def get_mkl_rootdir(self):
        ...
    
    def __init__(self) -> None:
        ...
    
    def calc_info(self):
        ...
    


class lapack_mkl_info(mkl_info):
    ...


class blas_mkl_info(mkl_info):
    ...


class atlas_info(system_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    if sys.platform[: 7] == 'freebsd':
        _lib_atlas = ...
        _lib_lapack = ...
    else:
        _lib_atlas = ...
        _lib_lapack = ...
    notfounderror = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


class atlas_blas_info(atlas_info):
    _lib_names = ...
    def calc_info(self):
        ...
    


class atlas_threads_info(atlas_info):
    dir_env_var = ...
    _lib_names = ...


class atlas_blas_threads_info(atlas_blas_info):
    dir_env_var = ...
    _lib_names = ...


class lapack_atlas_info(atlas_info):
    _lib_names = ...


class lapack_atlas_threads_info(atlas_threads_info):
    _lib_names = ...


class atlas_3_10_info(atlas_info):
    _lib_names = ...
    _lib_atlas = ...
    _lib_lapack = ...


class atlas_3_10_blas_info(atlas_3_10_info):
    _lib_names = ...
    def calc_info(self):
        ...
    


class atlas_3_10_threads_info(atlas_3_10_info):
    dir_env_var = ...
    _lib_names = ...
    _lib_atlas = ...
    _lib_lapack = ...


class atlas_3_10_blas_threads_info(atlas_3_10_blas_info):
    dir_env_var = ...
    _lib_names = ...


class lapack_atlas_3_10_info(atlas_3_10_info):
    ...


class lapack_atlas_3_10_threads_info(atlas_3_10_threads_info):
    ...


class lapack_info(system_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    notfounderror = ...
    def calc_info(self):
        ...
    


class lapack_src_info(system_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


atlas_version_c_text = r'''
/* This file is generated from numpy/distutils/system_info.py */
void ATL_buildinfo(void);
int main(void) {
  ATL_buildinfo();
  return 0;
}
'''
_cached_atlas_version = {  }
def get_atlas_version(**config):
    ...

class lapack_opt_info(system_info):
    notfounderror = ...
    def calc_info(self):
        ...
    


class blas_opt_info(system_info):
    notfounderror = ...
    def calc_info(self):
        ...
    


class blas_info(system_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    notfounderror = ...
    def calc_info(self):
        ...
    
    def has_cblas(self, info):
        ...
    


class openblas_info(blas_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    notfounderror = ...
    def check_embedded_lapack(self, info):
        ...
    
    def calc_info(self):
        ...
    
    def check_msvc_gfortran_libs(self, library_dirs, libraries):
        ...
    


class openblas_lapack_info(openblas_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    notfounderror = ...
    def check_embedded_lapack(self, info):
        ...
    


class openblas_clapack_info(openblas_lapack_info):
    _lib_names = ...


class blis_info(blas_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    notfounderror = ...
    def calc_info(self):
        ...
    


class accelerate_info(system_info):
    section = ...
    notfounderror = ...
    def calc_info(self):
        ...
    


class blas_src_info(system_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


class x11_info(system_info):
    section = ...
    notfounderror = ...
    def __init__(self) -> None:
        ...
    
    def calc_info(self):
        ...
    


class _numpy_info(system_info):
    section = ...
    modulename = ...
    notfounderror = ...
    def __init__(self) -> None:
        ...
    
    def calc_info(self):
        ...
    


class numarray_info(_numpy_info):
    section = ...
    modulename = ...


class Numeric_info(_numpy_info):
    section = ...
    modulename = ...


class numpy_info(_numpy_info):
    section = ...
    modulename = ...


class numerix_info(system_info):
    section = ...
    def calc_info(self):
        ...
    


class f2py_info(system_info):
    def calc_info(self):
        ...
    


class boost_python_info(system_info):
    section = ...
    dir_env_var = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


class agg2_info(system_info):
    section = ...
    dir_env_var = ...
    def get_paths(self, section, key):
        ...
    
    def calc_info(self):
        ...
    


class _pkg_config_info(system_info):
    section = ...
    config_env_var = ...
    default_config_exe = ...
    append_config_exe = ...
    version_macro_name = ...
    release_macro_name = ...
    version_flag = ...
    cflags_flag = ...
    def get_config_exe(self):
        ...
    
    def get_config_output(self, config_exe, option):
        ...
    
    def calc_info(self):
        ...
    


class wx_info(_pkg_config_info):
    section = ...
    config_env_var = ...
    default_config_exe = ...
    append_config_exe = ...
    version_macro_name = ...
    release_macro_name = ...
    version_flag = ...
    cflags_flag = ...


class gdk_pixbuf_xlib_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gdk_pixbuf_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gdk_x11_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gdk_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gdk_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gtkp_x11_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class gtkp_2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class xft_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class freetype2_info(_pkg_config_info):
    section = ...
    append_config_exe = ...
    version_macro_name = ...


class amd_info(system_info):
    section = ...
    dir_env_var = ...
    _lib_names = ...
    def calc_info(self):
        ...
    


class umfpack_info(system_info):
    section = ...
    dir_env_var = ...
    notfounderror = ...
    _lib_names = ...
    def calc_info(self):
        ...
    


def combine_paths(*args, **kws):
    """ Return a list of existing paths composed by all combinations of
        items from arguments.
    """
    ...

language_map = { 'c': 0,'c++': 1,'f77': 2,'f90': 3 }
inv_language_map = { 0: 'c',1: 'c++',2: 'f77',3: 'f90' }
def dict_append(d, **kws):
    ...

def parseCmdLine(argv=...):
    ...

def show_all(argv=...):
    ...

if __name__ == "__main__":
    ...
