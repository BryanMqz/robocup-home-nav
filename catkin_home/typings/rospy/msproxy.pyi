"""
This type stub file was generated by pyright.
"""

"""
Master/Slave XML-RPC Wrappers.

The L{MasterProxy} simplifies usage of master/slave
APIs by automatically inserting the caller ID and also adding python
dictionary accessors on the parameter server.
"""
_master_arg_remap = { 'deleteParam': [0],'setParam': [0],'getParam': [0],'searchParam': [0],'subscribeParam': [0],'unsubscribeParam': [0],'hasParam': [0],'registerService': [0],'lookupService': [0],'unregisterService': [0],'registerSubscriber': [0],'unregisterSubscriber': [0],'registerPublisher': [0],'unregisterPublisher': [0],'lookupNode': [0],'getPublishedTopics': [0] }
class MasterProxy(object):
    """
    Convenience wrapper for ROS master API and XML-RPC
    implementation. The Master API methods can be invoked on this
    object and will be forwarded appropriately. Names in arguments
    will be remapped according to current node settings. Provides
    dictionary-like access to parameter server, e.g.::
    
      master[key] = value

    All methods are thread-safe.
    """
    def __init__(self, uri) -> None:
        """
        Constructor for wrapping a remote master instance.
        @param uri: XML-RPC URI of master
        @type  uri: str
        """
        ...
    
    def __getattr__(self, key):
        ...
    
    def __getitem__(self, key):
        """
        Fetch item from parameter server and subscribe to future updates so that
        values can be cached.
        @param key: parameter key
        @type key: str
        @raise KeyError: if key is not set
        """
        ...
    
    def __setitem__(self, key, val):
        """
        Set parameter value on Parameter Server
        @param key: parameter key
        @type key: str
        @param val: parameter value
        @type val: XMLRPC legal value
        """
        ...
    
    def search_param(self, key):
        """
        Search for a parameter matching key on the parameter server
        @return: found key or None if search did not succeed
        @rtype: str
        @raise ROSException: if parameter server reports an error
        """
        ...
    
    def get_param_cached(self, key):
        ...
    
    def __delitem__(self, key):
        """
        Delete parameter key from the parameter server.
        @raise KeyError: if key is not set
        @raise ROSException: if parameter server reports an error
        """
        ...
    
    def __contains__(self, key):
        """
        Check if parameter is set on Parameter Server
        @param key: parameter key
        @type key: str
        @raise ROSException: if parameter server reports an error
        """
        ...
    
    def __iter__(self):
        """
        @raise ROSException: if parameter server reports an error
        """
        ...
    


