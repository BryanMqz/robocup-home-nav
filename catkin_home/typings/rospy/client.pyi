"""
This type stub file was generated by pyright.
"""

import logging
from threading import Lock
from rosgraph_msgs.msg import Log

"""
Additional ROS client API methods.
"""
TIMEOUT_READY = 15
DEBUG = Log.DEBUG
INFO = Log.INFO
WARN = Log.WARN
ERROR = Log.ERROR
FATAL = Log.FATAL
def myargv(argv=...):
    """
    Remove ROS remapping arguments from sys.argv arguments.
    @return: copy of sys.argv with ROS remapping arguments removed
    @rtype: [str]
    """
    ...

def load_command_line_node_params(argv):
    """
    Load node param mappings (aka private parameters) encoded in
    command-line arguments, e.g. _foo:=bar. See also rosgraph.names.load_mappings.
    @param argv: command-line arguments
    @param argv: [str]
    @return: param->value remappings. 
    @rtype: {str: val}
    @raises: ROSInitException
    """
    ...

def on_shutdown(h):
    """
    Register function to be called on shutdown. This function will be
    called before Node begins teardown.
    @param h: Function with zero args to be called on shutdown.
    @type  h: fn()
    """
    ...

def spin():
    """
    Blocks until ROS node is shutdown. Yields activity to other threads.
    @raise ROSInitException: if node is not in a properly initialized state
    """
    ...

_logging_level_names = { logging.DEBUG: 'DEBUG',logging.INFO: 'INFO',logging.WARNING: 'WARN',logging.ERROR: 'ERROR',logging.CRITICAL: 'FATAL' }
_names_to_logging_levels = { 'DEBUG': logging.DEBUG,'INFO': logging.INFO,'WARN': logging.WARNING,'ERROR': logging.ERROR,'FATAL': logging.CRITICAL }
_init_node_args = None
def init_node(name, argv=..., anonymous=..., log_level=..., disable_rostime=..., disable_rosout=..., disable_signals=..., xmlrpc_port=..., tcpros_port=...):
    """
    Register client node with the master under the specified name.
    This MUST be called from the main Python thread unless
    disable_signals is set to True. Duplicate calls to init_node are
    only allowed if the arguments are identical as the side-effects of
    this method are not reversible.

    @param name: Node's name. This parameter must be a base name,
        meaning that it cannot contain namespaces (i.e. '/')
    @type  name: str
    
    @param argv: Command line arguments to this program, including
        remapping arguments (default: sys.argv). If you provide argv
        to init_node(), any previously created rospy data structure
        (Publisher, Subscriber, Service) will have invalid
        mappings. It is important that you call init_node() first if
        you wish to provide your own argv.
    @type  argv: [str]

    @param anonymous: if True, a name will be auto-generated for the
        node using name as the base.  This is useful when you wish to
        have multiple instances of the same node and don't care about
        their actual names (e.g. tools, guis). name will be used as
        the stem of the auto-generated name. NOTE: you cannot remap
        the name of an anonymous node.  
    @type anonymous: bool

    @param log_level: log level for sending message to /rosout and log
        file, which is INFO by default. For convenience, you may use
        rospy.DEBUG, rospy.INFO, rospy.ERROR, rospy.WARN, rospy.FATAL
    @type  log_level: int
    
    @param disable_signals: If True, rospy will not register its own
        signal handlers. You must set this flag if (a) you are unable
        to call init_node from the main thread and/or you are using
        rospy in an environment where you need to control your own
        signal handling (e.g. WX). If you set this to True, you should
        call rospy.signal_shutdown(reason) to initiate clean shutdown.

        NOTE: disable_signals is overridden to True if
        roslib.is_interactive() is True.
        
    @type  disable_signals: bool
    
    @param disable_rostime: for internal testing only: suppresses
        automatic subscription to rostime
    @type  disable_rostime: bool

    @param disable_rosout: for internal testing only: suppress
        auto-publication of rosout
    @type  disable_rostime: bool

    @param xmlrpc_port: If provided, it will use this port number for the client
        XMLRPC node. 
    @type  xmlrpc_port: int

    @param tcpros_port: If provided, the TCPROS server will listen for
        connections on this port
    @type  tcpros_port: int

    @raise ROSInitException: if initialization/registration fails
    @raise ValueError: if parameters are invalid (e.g. name contains a namespace or is otherwise illegal)
    """
    ...

_master_proxy = None
_master_proxy_lock = Lock()
def get_master(env=...):
    """
    Get a remote handle to the ROS Master.
    This method can be called independent of running a ROS node,
    though the ROS_MASTER_URI must be declared in the environment.

    @return: ROS Master remote object
    @rtype: L{rospy.MasterProxy}
    @raise Exception: if server cannot be located or system cannot be
    initialized
    """
    ...

def get_published_topics(namespace=...):
    """
    Retrieve list of topics that the master is reporting as being published.

    @return: List of topic names and types: [[topic1, type1]...[topicN, typeN]]
    @rtype: [[str, str]]
    """
    ...

class _WFM(object):
    def __init__(self) -> None:
        ...
    
    def cb(self, msg):
        ...
    


def wait_for_message(topic, topic_type, timeout=...):
    """
    Receive one message from topic.
    
    This will create a new subscription to the topic, receive one message, then unsubscribe.

    @param topic: name of topic
    @type  topic: str
    @param topic_type: topic type
    @type  topic_type: L{rospy.Message} class
    @param timeout: timeout time in seconds or ROS Duration
    @type  timeout: double|rospy.Duration
    @return: Message
    @rtype: L{rospy.Message}
    @raise ROSException: if specified timeout is exceeded
    @raise ROSInterruptException: if shutdown interrupts wait
    """
    ...

_param_server = None
_param_server_lock = Lock()
class _Unspecified(object):
    ...


_unspecified = _Unspecified()
def get_param(param_name, default=...):
    """
    Retrieve a parameter from the param server

    NOTE: this method is thread-safe.
    
    @param default: (optional) default value to return if key is not set
    @type  default: any
    @return: parameter value
    @rtype: XmlRpcLegalValue
    @raise ROSException: if parameter server reports an error
    @raise KeyError: if value not set and default is not given
    """
    ...

def get_param_cached(param_name, default=...):
    """
    Retrieve a parameter from the param server with local caching

    NOTE: this method is thread-safe.

    @param default: (optional) default value to return if key is not set
    @type  default: any
    @return: parameter value
    @rtype: XmlRpcLegalValue
    @raise ROSException: if parameter server reports an error
    @raise KeyError: if value not set and default is not given
    """
    ...

def get_param_names():
    """
    Retrieve list of parameter names.

    NOTE: this method is thread-safe.
    
    @return: parameter names
    @rtype: [str]
    @raise ROSException: if parameter server reports an error
    """
    ...

def set_param(param_name, param_value):
    """
    Set a parameter on the param server

    NOTE: this method is thread-safe.
    If param_value is a dictionary it will be treated as a parameter
    tree, where param_name is the namespace. For example:::
      {'x':1,'y':2,'sub':{'z':3}}
    will set param_name/x=1, param_name/y=2, and param_name/sub/z=3.
    Furthermore, it will replace all existing parameters in the
    param_name namespace with the parameters in param_value. You must
    set parameters individually if you wish to perform a union update.

    @param param_name: parameter name
    @type  param_name: str
    @param param_value: parameter value
    @type  param_value: XmlRpcLegalValue
    @raise ROSException: if parameter server reports an error
    """
    ...

def search_param(param_name):
    """
    Search for a parameter on the param server

    NOTE: this method is thread-safe.
    
    @param param_name: parameter name
    @type  param_name: str
    @return: key of matching parameter or None if no matching parameter. 
    @rtype: str
    @raise ROSException: if parameter server reports an error
    """
    ...

def delete_param(param_name):
    """
    Delete a parameter on the param server

    NOTE: this method is thread-safe.
    
    @param param_name: parameter name
    @type  param_name: str
    @raise KeyError: if parameter is not set    
    @raise ROSException: if parameter server reports an error
    """
    ...

def has_param(param_name):
    """
    Test if parameter exists on the param server

    NOTE: this method is thread-safe.
    
    @param param_name: parameter name
    @type  param_name: str
    @raise ROSException: if parameter server reports an error
    """
    ...

