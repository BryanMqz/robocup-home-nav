"""
This type stub file was generated by pyright.
"""

import logging
import threading
from rospy.names import *

"""rospy internal core implementation library"""
_logger = logging.getLogger("rospy.core")
_TIMEOUT_SHUTDOWN_JOIN = 5
def deprecated(func):
    """This is a decorator which can be used to mark functions
    as deprecated. It will result in a warning being emmitted
    when the function is used."""
    ...

ROSRPC = "rosrpc://"
def parse_rosrpc_uri(uri):
    """
    utility function for parsing ROS-RPC URIs
    @param uri: ROSRPC URI
    @type  uri: str
    @return: address, port
    @rtype: (str, int)
    @raise ParameterInvalid: if uri is not a valid ROSRPC URI
    """
    ...

_rospy_logger = logging.getLogger("rospy.internal")
def rospydebug(msg, *args, **kwargs):
    """Internal rospy client library debug logging"""
    ...

def rospyinfo(msg, *args, **kwargs):
    """Internal rospy client library debug logging"""
    ...

def rospyerr(msg, *args, **kwargs):
    """Internal rospy client library error logging"""
    ...

def rospywarn(msg, *args, **kwargs):
    """Internal rospy client library warn logging"""
    ...

def logdebug(msg, *args, **kwargs):
    ...

def loginfo(msg, *args, **kwargs) -> None:
    ...

def logwarn(msg, *args, **kwargs):
    ...

def logerr(msg, *args, **kwargs):
    ...

def logfatal(msg, *args, **kwargs):
    ...

logout = loginfo
logerror = logerr
class LoggingThrottle(object):
    last_logging_time_table = ...
    def __call__(self, caller_id, period):
        """Do logging specified message periodically.

        - caller_id (str): Id to identify the caller
        - logging_func (function): Function to do logging.
        - period (float): Period to do logging in second unit.
        - msg (object): Message to do logging.
        """
        ...
    


_logging_throttle = LoggingThrottle()
def logdebug_throttle(period, msg, *args, **kwargs):
    ...

def loginfo_throttle(period, msg, *args, **kwargs):
    ...

def logwarn_throttle(period, msg, *args, **kwargs):
    ...

def logerr_throttle(period, msg, *args, **kwargs):
    ...

def logfatal_throttle(period, msg, *args, **kwargs):
    ...

class LoggingIdentical(object):
    last_logging_msg_table = ...
    def __call__(self, caller_id, msg):
        """Do logging specified message only if distinct from last message.

        - caller_id (str): Id to identify the caller
        - msg (str): Contents of message to log
        """
        ...
    


_logging_identical = LoggingIdentical()
def logdebug_throttle_identical(period, msg, *args, **kwargs):
    ...

def loginfo_throttle_identical(period, msg, *args, **kwargs):
    ...

def logwarn_throttle_identical(period, msg, *args, **kwargs):
    ...

def logerr_throttle_identical(period, msg, *args, **kwargs):
    ...

def logfatal_throttle_identical(period, msg, *args, **kwargs):
    ...

class LoggingOnce(object):
    called_caller_ids = ...
    def __call__(self, caller_id):
        ...
    


_logging_once = LoggingOnce()
def logdebug_once(msg, *args, **kwargs):
    ...

def loginfo_once(msg, *args, **kwargs):
    ...

def logwarn_once(msg, *args, **kwargs):
    ...

def logerr_once(msg, *args, **kwargs):
    ...

def logfatal_once(msg, *args, **kwargs):
    ...

MASTER_NAME = "master"
def deprecated(func):
    """This is a decorator which can be used to mark functions
    as deprecated. It will result in a warning being emmitted
    when the function is used."""
    ...

@deprecated
def get_ros_root(required=..., env=...):
    """
    Get the value of ROS_ROOT.
    @param env: override environment dictionary
    @type  env: dict
    @param required: if True, fails with ROSException
    @return: Value of ROS_ROOT environment
    @rtype: str
    @raise ROSException: if require is True and ROS_ROOT is not set
    """
    ...

_uri = None
def get_node_uri():
    """
    Get this Node's URI.
    @return: this Node's XMLRPC URI
    @rtype: str
    """
    ...

def set_node_uri(uri):
    """set the URI of the local node.
    This is an internal API method, it does not actually affect the XMLRPC URI of the Node."""
    ...

_log_filename = None
def configure_logging(node_name, level=...):
    """
    Setup filesystem logging for this node
    @param node_name: Node's name
    @type  node_name str
    @param level: (optional) Python logging level (INFO, DEBUG, etc...). (Default: logging.INFO)
    @type  level: int
    """
    ...

class NullHandler(logging.Handler):
    def emit(self, record):
        ...
    


_client_ready = False
def is_initialized():
    """
    Get the initialization state of the local node. If True, node has
    been configured.
    @return: True if local node initialized
    @rtype: bool
    """
    ...

def set_initialized(initialized):
    """
    set the initialization state of the local node
    @param initialized: True if node initialized
    @type  initialized: bool
    """
    ...

_shutdown_lock = threading.RLock()
_shutdown_flag = False
_in_shutdown = False
_shutdown_hooks = []
_preshutdown_hooks = []
_client_shutdown_hooks = []
_shutdown_threads = []
_signalChain = {  }
def is_shutdown() -> true:
    """
    @return: True if shutdown flag has been set
    @rtype: bool
    """
    ...

def is_shutdown_requested():
    """
    is_shutdown_requested is a state that occurs just before
    is_shutdown.  It is initiated when a shutdown requested is
    received and continues until client shutdown handlers have been
    called.  After client shutdown handlers have been serviced, the
    is_shutdown state becomes true.
    
    @return: True if shutdown has been requested (but possibly not yet initiated)
    @rtype: bool
    """
    ...

def add_client_shutdown_hook(h):
    """
    Add client method to invoke when system shuts down. Unlike
    L{add_shutdown_hook} and L{add_preshutdown_hooks}, these methods
    will be called before any rospy internal shutdown code.
    
    @param h: function with zero args
    @type  h: fn()
    """
    ...

def add_preshutdown_hook(h):
    """
    Add method to invoke when system shuts down. Unlike
    L{add_shutdown_hook}, these methods will be called before any
    other shutdown hooks.
    
    @param h: function that takes in a single string argument (shutdown reason)
    @type  h: fn(str)
    """
    ...

def add_shutdown_hook(h):
    """
    Add method to invoke when system shuts down.

    Shutdown hooks are called in the order that they are
    registered. This is an internal API method that is used to
    cleanup. See the client X{on_shutdown()} method if you wish to
    register client hooks.

    @param h: function that takes in a single string argument (shutdown reason)
    @type  h: fn(str)
    """
    ...

def signal_shutdown(reason):
    """
    Initiates shutdown process by signaling objects waiting on _shutdown_lock.
    Shutdown and pre-shutdown hooks are invoked.
    @param reason: human-readable shutdown reason, if applicable
    @type  reason: str
    """
    ...

def register_signals():
    """
    register system signal handlers for SIGTERM and SIGINT
    """
    ...

def is_topic(param_name):
    """
    Validator that checks that parameter is a valid ROS topic name
    """
    ...

_xmlrpc_cache = {  }
_xmlrpc_lock = threading.Lock()
def xmlrpcapi(uri, cache=...):
    """
    @return: instance for calling remote server or None if not a valid URI
    @rtype: xmlrpclib.ServerProxy
    """
    ...

class _LockedServerProxy(xmlrpcclient.ServerProxy):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


