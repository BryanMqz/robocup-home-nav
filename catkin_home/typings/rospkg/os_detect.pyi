"""
This type stub file was generated by pyright.
"""

import sys

"""
Library for detecting the current OS, including detecting specific
Linux distributions.
"""
if sys.version_info >= (3, 8):
    ...
else:
    ...
def uname_get_machine():
    """
    Linux: wrapper around uname to determine if OS is 64-bit
    """
    ...

def read_issue(filename=...):
    """
    :returns: list of strings in issue file, or None if issue file cannot be read/split
    """
    ...

def read_os_release(filename=...):
    """
    :returns: Dictionary of key value pairs from /etc/os-release or fallback to 
      /usr/lib/os-release, with quotes stripped from values
    """
    ...

class OsNotDetected(Exception):
    """
    Exception to indicate failure to detect operating system.
    """
    ...


class OsDetector(object):
    """
    Generic API for detecting a specific OS.
    """
    def is_os(self):
        """
        :returns: if the specific OS which this class is designed to
          detect is present.  Only one version of this class should
          return for any version.
        """
        ...
    
    def get_version(self):
        """
        :returns: standardized version for this OS. (aka Ubuntu Hardy Heron = "8.04")
        :raises: :exc:`OsNotDetected` if called on incorrect OS.
        """
        ...
    
    def get_codename(self):
        """
        :returns: codename for this OS. (aka Ubuntu Hardy Heron = "hardy").  If codenames are not available for this OS, return empty string.
        :raises: :exc:`OsNotDetected` if called on incorrect OS.
        """
        ...
    


class LsbDetect(OsDetector):
    """
    Generic detector for Debian, Ubuntu, Mint, and Pop! OS
    """
    def __init__(self, lsb_name, get_version_fn=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Debian(LsbDetect):
    def __init__(self, get_version_fn=...) -> None:
        ...
    
    def get_codename(self):
        ...
    


class FdoDetect(OsDetector):
    """
    Generic detector for operating systems implementing /etc/os-release, as defined by the os-release spec hosted at Freedesktop.org (Fdo):
    http://www.freedesktop.org/software/systemd/man/os-release.html
    Requires that the "ID", and "VERSION_ID" keys are set in the os-release file.

    Codename is parsed from the VERSION key if available: either using the format "foo, CODENAME" or "foo (CODENAME)."
    If the VERSION key is not present, the VERSION_ID is value is used as the codename.
    """
    def __init__(self, fdo_id) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class OpenEmbedded(OsDetector):
    """
    Detect OpenEmbedded.
    """
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class OpenSuse(OsDetector):
    """
    Detect OpenSuse OS.
    """
    def __init__(self, brand_file=..., release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Fedora(OsDetector):
    """
    Detect Fedora OS.
    """
    def __init__(self, release_file=..., issue_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Rhel(Fedora):
    """
    Detect Redhat OS.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


_osx_codename_map = { 4: 'tiger',5: 'leopard',6: 'snow',7: 'lion',8: 'mountain lion',9: 'mavericks',10: 'yosemite',11: 'el capitan',12: 'sierra',13: 'high sierra',14: 'mojave',15: 'catalina' }
class OSX(OsDetector):
    """
    Detect OS X
    """
    def __init__(self, sw_vers_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_codename(self):
        ...
    
    def get_version(self):
        ...
    


class QNX(OsDetector):
    '''
    Detect QNX realtime OS.
    @author: Isaac Saito
    '''
    def __init__(self, uname_file=...) -> None:
        '''
        @param uname_file: An executable that can be used for detecting
                           OS name and version.
        '''
        ...
    
    def is_os(self):
        ...
    
    def get_codename(self):
        ...
    
    def get_version(self):
        ...
    


class Arch(OsDetector):
    """
    Detect Arch Linux.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Manjaro(Arch):
    """
    Detect Manjaro.
    """
    def __init__(self, release_file=...) -> None:
        ...
    


class Centos(OsDetector):
    """
    Detect CentOS.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Cygwin(OsDetector):
    """
    Detect Cygwin presence on Windows OS.
    """
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Gentoo(OsDetector):
    """
    Detect Gentoo OS.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Funtoo(Gentoo):
    """
    Detect Funtoo OS, a Gentoo Variant.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    


class FreeBSD(OsDetector):
    """
    Detect FreeBSD OS.
    """
    def __init__(self, uname_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Slackware(OsDetector):
    """
    Detect SlackWare Linux.
    """
    def __init__(self, release_file=...) -> None:
        ...
    
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class Windows(OsDetector):
    """
    Detect Windows OS.
    """
    def is_os(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


class OsDetect:
    """
    This class will iterate over registered classes to lookup the
    active OS and version
    """
    default_os_list = ...
    def __init__(self, os_list=...) -> None:
        ...
    
    @staticmethod
    def register_default(os_name, os_detector):
        """
        Register detector to be used with all future instances of
        :class:`OsDetect`.  The new detector will have precedence over
        any previously registered detectors associated with *os_name*.

        :param os_name: OS key associated with OS detector
        :param os_detector: :class:`OsDetector` instance
        """
        ...
    
    def detect_os(self, env=...):
        """
        Detect operating system.  Return value can be overridden by
        the :env:`ROS_OS_OVERRIDE` environment variable.

        :param env: override ``os.environ``
        :returns: (os_name, os_version, os_codename), ``(str, str, str)``
        :raises: :exc:`OsNotDetected` if OS could not be detected
        """
        ...
    
    def get_detector(self, name=...):
        """
        Get detector used for specified OS name, or the detector for this OS if name is ``None``.

        :raises: :exc:`KeyError`
        """
        ...
    
    def add_detector(self, name, detector):
        """
        Add detector to list of detectors used by this instance.  *detector* will override any previous
        detectors associated with *name*.

        :param name: OS name that detector matches
        :param detector: :class:`OsDetector` instance
        """
        ...
    
    def get_name(self):
        ...
    
    def get_version(self):
        ...
    
    def get_codename(self):
        ...
    


OS_ALPINE = 'alpine'
OS_ARCH = 'arch'
OS_MANJARO = 'manjaro'
OS_CENTOS = 'centos'
OS_CYGWIN = 'cygwin'
OS_DEBIAN = 'debian'
OS_ELEMENTARY = 'elementary'
OS_ELEMENTARY_OLD = 'elementary'
OS_FEDORA = 'fedora'
OS_FREEBSD = 'freebsd'
OS_FUNTOO = 'funtoo'
OS_GENTOO = 'gentoo'
OS_LINARO = 'linaro'
OS_MINT = 'mint'
OS_MX = 'mx'
OS_NEON = 'neon'
OS_OPENEMBEDDED = 'openembedded'
OS_OPENSUSE = 'opensuse'
OS_OPENSUSE13 = 'opensuse'
OS_TIZEN = 'tizen'
OS_SAILFISHOS = 'sailfishos'
OS_OSX = 'osx'
OS_POP = 'pop'
OS_QNX = 'qnx'
OS_RHEL = 'rhel'
OS_SLACKWARE = 'slackware'
OS_UBUNTU = 'ubuntu'
OS_CLEARLINUX = 'clearlinux'
OS_NIXOS = 'nixos'
OS_WINDOWS = 'windows'
OS_ZORIN = 'zorin'
if __name__ == '__main__':
    detect = OsDetect()
