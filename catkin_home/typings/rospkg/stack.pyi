"""
This type stub file was generated by pyright.
"""

"""
Library for processing stack.xml created post-catkin
"""
REQUIRED = ['name', 'version', 'description', 'author', 'maintainer', 'license', 'copyright']
ALLOWXHTML = ['description']
OPTIONAL = ['description_brief', 'version_abi', 'url', 'review_notes', 'review_status', 'build_depends', 'depends', 'build_type', 'message_generator', 'review']
LISTED_ATTRIBUTES = { 'Author': ['name', 'email'],'Maintainer': ['name', 'email'],'Depend': ['name', 'version'] }
VALID = REQUIRED + OPTIONAL
class InvalidStack(Exception):
    ...


class Stack(object):
    """
    Object representation of a ROS ``stack.xml`` file
    """
    __slots__ = ...
    def __init__(self, filename=...) -> None:
        """
        :param filename: location of stack.xml.  Necessary if
          converting ``${prefix}`` in ``<export>`` values, ``str``.
        """
        ...
    


def parse_stack_file(stack_path):
    """
    Parse stack file.

    :param stack_path: The path of the stack.xml file

    :returns: return :class:`Stack` instance, populated with parsed fields
    :raises: :exc:`InvalidStack`
    :raises: :exc:`IOError`
    """
    ...

def parse_stack(string, filename):
    """
    Parse stack.xml string contents.

    :param string: stack.xml contents, ``str``
    :param filename: full file path for debugging, ``str``
    :returns: return parsed :class:`Stack`
    """
    ...

