"""
This type stub file was generated by pyright.
"""

"""
Representation/model of rosdistro format.
"""
TARBALL_URI_EVAL = 'http://svn.code.sf.net/p/ros-dry-releases/code/download/stacks/$STACK_NAME/$STACK_NAME-$STACK_VERSION/$STACK_NAME-$STACK_VERSION.tar.bz2'
TARBALL_VERSION_EVAL = '$STACK_NAME-$STACK_VERSION'
class InvalidDistro(Exception):
    """
    Distro file data does not match specification.
    """
    ...


def distro_uri(distro_name):
    """
    Get distro URI of main ROS distribution files.

    :param distro_name: name of distro, e.g. 'diamondback'
    :returns: the SVN/HTTP URL of the specified distro.  This function should only be used
      with the main distros.
    """
    ...

def expand_rule(rule, stack_name, stack_ver, release_name):
    ...

class DistroStack(object):
    """Stores information about a stack release"""
    def __init__(self, stack_name, stack_version, release_name, rules) -> None:
        """
        :param stack_name: Name of stack
        :param stack_version: Version number of stack.
        :param release_name: name of distribution release.  Necessary for rule expansion.
        :param rules: raw '_rules' data.  Will be converted into appropriate vcs config instance.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class Variant(object):
    """
    A variant defines a specific set of stacks ("metapackage", in Debian
    parlance). For example, "base", "pr2". These variants can extend
    another variant.
    """
    def __init__(self, variant_name, extends, stack_names, stack_names_implicit) -> None:
        """
        :param variant_name: name of variant to load from distro file, ``str``
        :param stack_names_implicit: full list of stacks implicitly included in this variant, ``[str]``
        :param raw_data: raw rosdistro data for this variant
        """
        ...
    
    def get_stack_names(self, implicit=...):
        ...
    
    stack_names = ...


class Distro(object):
    """
    Store information in a rosdistro file.
    """
    def __init__(self, stacks, variants, release_name, version, raw_data) -> None:
        """
        :param stacks: dictionary mapping stack names to :class:`DistroStack` instances
        :param variants: dictionary mapping variant names to :class:`Variant` instances
        :param release_name: name of release, e.g. 'diamondback'
        :param version: version number of release
        :param raw_data: raw dictionary representation of a distro
        """
        ...
    
    def get_stacks(self, released=...):
        """
        :param released: only included released stacks
        :returns: dictionary of stack names to :class:`DistroStack` instances in
          this distro.
        """
        ...
    
    stacks = ...
    released_stacks = ...


def load_distro(source_uri):
    """
    :param source_uri: source URI of distro file, or path to distro
      file.  Filename has precedence in resolution.

    :raises: :exc:`InvalidDistro` If distro file is invalid
    :raises: :exc:`ResourceNotFound` If file at *source_uri* is not found
    """
    ...

def distro_to_rosinstall(distro, branch, variant_name=..., implicit=..., released_only=..., anonymous=...):
    """
    :param branch: branch to convert for
    :param variant_name: if not None, only include stacks in the specified variant.
    :param implicit: if variant_name is provided, include full (recursive) dependencies of variant, default True
    :param released_only: only included released stacks, default True.
    :param anonymous: create for anonymous access rules
    :returns: rosinstall data in Python list format, ``[dict]``

    :raises: :exc:`KeyError` If branch is invalid or if distro is mis-configured
    """
    ...

class VcsConfig(object):
    """
    Base representation of a rosdistro VCS rules configuration.
    """
    def __init__(self, type_) -> None:
        ...
    
    def to_rosinstall(self, local_name, branch, anonymous):
        ...
    
    def load(self, rules, rule_eval):
        """
        Initialize fields of this class based on the raw rosdistro
        *rules* data after applying *rule_eval* function (e.g. to
        replace variables in rules).

        :param rules: raw rosdistro rules entry, ``dict``
        :param rule_eval: function to evaluate rule values, ``fn(str) -> str``
        """
        ...
    
    def get_branch(self, branch, anonymous):
        """
        :raises: :exc:`ValueError` If branch is invalid
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class DvcsConfig(VcsConfig):
    """
    Configuration information for a distributed VCS-style repository.

    Configuration fields:

     * ``repo_uri``: base URI of repo
     * ``dev_branch``: git branch the code is developed
     * ``distro_tag``: a tag of the latest released code for a specific ROS distribution
     * ``release_tag``: a tag of the code for a specific release
    """
    def __init__(self, type_) -> None:
        ...
    
    def load(self, rules, rule_eval):
        ...
    
    def get_branch(self, branch, anonymous):
        """
        :raises: :exc:`KeyError` Invalid branch parameter
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class GitConfig(DvcsConfig):
    """
    Configuration information about an GIT repository. See parent class :class:`DvcsConfig` for more API information.
    """
    def __init__(self) -> None:
        ...
    


class HgConfig(DvcsConfig):
    """
    Configuration information about a Mercurial repository. See parent class :class:`DvcsConfig` for more API information.
    """
    def __init__(self) -> None:
        ...
    


class BzrConfig(DvcsConfig):
    """
    Configuration information about an BZR repository.  See parent class :class:`DvcsConfig` for more API information.
    """
    def __init__(self) -> None:
        ...
    


class SvnConfig(VcsConfig):
    """
    Configuration information about an SVN repository.

    Configuration fields:

     * ``dev``: where the code is developed
     * ``distro_tag``: a tag of the code for a specific ROS distribution
     * ``release_tag``: a tag of the code for a specific release
    """
    def __init__(self) -> None:
        ...
    
    def load(self, rules, rule_eval):
        ...
    
    def get_branch(self, branch, anonymous):
        """
        :raises: :exc:`ValueError` If branch is invalid
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


_vcs_configs = { 'svn': SvnConfig,'git': GitConfig,'hg': HgConfig,'bzr': BzrConfig }
def get_vcs_configs():
    """
    :returns: Dictionary of supported :class:`VcsConfig` instances.
      Key is the VCS type name, e.g. 'svn'. ``{str: VcsConfig}``
    """
    ...

def load_vcs_config(rules, rule_eval):
    """
    Factory for creating :class:`VcsConfig` subclass based on
    rosdistro _rules data.

    :param rules: rosdistro rules data
    :param rules_eval: Function to apply to rule values, e.g. to
      convert variables.  ``fn(str)->str``
    :returns: :class:`VcsConfig` subclass instance with interpreted rules data.
    """
    ...

def current_distro_codename(env=...):
    """
    Get the currently active ROS distribution codename, e.g. 'fuerte'

    :param env: override os.environ, ``dict``
    """
    ...

